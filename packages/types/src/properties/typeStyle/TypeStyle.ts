// This file was generated by [ts-rs](https://github.com/Aleph-Alpha/ts-rs). Do not edit this file manually.
import type { HyperLink } from "../HyperLink";
import type { Paint } from "../paint/Paint";
import type { TypeStyleLineHeightUnit } from "./TypeStyleLineHeightUnit";
import type { TypeStyleSemanticItalic } from "./TypeStyleSemanticItalic";
import type { TypeStyleSemanticWeight } from "./TypeStyleSemanticWeight";
import type { TypeStyleTextAlignHorizontal } from "./TypeStyleTextAlignHorizontal";
import type { TypeStyleTextAlignVertical } from "./TypeStyleTextAlignVertical";
import type { TypeStyleTextAutoResize } from "./TypeStyleTextAutoResize";
import type { TypeStyleTextCase } from "./TypeStyleTextCase";
import type { TypeStyleTextDecoration } from "./TypeStyleTextDecoration";
import type { TypeStyleTextTruncation } from "./TypeStyleTextTruncation";

/**
 * Metadata for character formatting
 */
export type TypeStyle = { 
/**
 * Font family of text (standard name)
 */
fontFamily: string, 
/**
 * PostScript font name
 */
fontPostScriptName: string, 
/**
 * Space between paragraphs in px, 0 if not present
 * default: 0
 */
paragraphSpacing: number, 
/**
 * Paragraph indentation in px, 0 if not present
 * default: 0
 */
paragraphIndent: number, 
/**
 * Space between list items in px, 0 if not present
 * default: 0
 */
listSpacing: number, 
/**
 * Whether or not text is italicized
 */
italic: boolean, 
/**
 * Numeric font weight
 */
fontWeight: number, 
/**
 * Font size in px
 */
fontSize: number, 
/**
 * Text casing applied to the node, default is the original casing
 * UPPER
 * LOWER
 * TITLE
 * SMALL_CAPS
 * SMALL_CAPS_FORCED
 */
textCase: TypeStyleTextCase, 
/**
 * default: ORIGINAL
 * Text decoration applied to the node, default is none
 * STRIKETHROUGH
 * UNDERLINE
 */
textDecoration: TypeStyleTextDecoration, 
/**
 * default: NONE
 * Dimensions along which text will auto resize, default is that the text does not
 * auto-resize. TRUNCATE means that the text will be shortened and trailing text will be
 * replaced with "â€¦" if the text contents is larger than the bounds. TRUNCATE as a return
 * value is deprecated and will be removed in a future version. Read fromtextTruncation
 * instead. HEIGHT
 * WIDTH_AND_HEIGHT
 * [DEPRECATED] TRUNCATE
 */
textAutoResize: TypeStyleTextAutoResize, 
/**
 * default: NONE
 * Whether this text node will truncate with an ellipsis when the text contents is larger than
 * the text node. DISABLED
 * ENDING
 */
textTruncation: TypeStyleTextTruncation, 
/**
 * default: DISABLED
 * When textTruncation: "ENDING" is set, maxLinesdetermines how many lines a text node can
 * grow to before it truncates
 */
maxLines: number, 
/**
 * default: null
 * Horizontal text alignment as string enum
 * LEFT
 * RIGHT
 * CENTER
 * JUSTIFIED
 */
textAlignHorizontal: TypeStyleTextAlignHorizontal, 
/**
 * Vertical text alignment as string enum
 * TOP
 * CENTER
 * BOTTOM
 */
textAlignVertical: TypeStyleTextAlignVertical, 
/**
 * Space between characters in px
 */
letterSpacing: number, 
/**
 * Paints applied to characters
 */
fills: Array<Paint>, 
/**
 * Link to a URL or frame
 */
hyperlink: HyperLink, 
/**
 * A map of OpenType feature flags to 1 or 0, 1 if it is enabled and 0 if it is disabled. Note
 * that some flags aren't reflected here. For example, SMCP (small caps) is still represented
 * by the textCase field.
 */
opentypeFlags: { [key in string]?: number }, 
/**
 * default: {}
 * Line height in px
 */
lineHeightPx: number, 
/**
 * Line height as a percentage of normal line height. This is deprecated; in a future version
 * of the API only lineHeightPx and lineHeightPercentFontSize will be returned.
 */
lineHeightPercent: number, 
/**
 * default: 100
 * Line height as a percentage of the font size. Only returned when lineHeightPercent is not
 * 100.
 */
lineHeightPercentFontSize: number, 
/**
 * The unit of the line height value specified by the user.
 * PIXELS
 * FONT_SIZE_%
 * INTRINSIC_%
 */
lineHeightUnit: TypeStyleLineHeightUnit, 
/**
 * Whether or not there are overrides over a text style. The possible fields to override are
 * semanticWeight, semanticItalic, hyperlink, and textDecoration. If this is true, then those
 * fields are overrides if present.
 */
isOverrideOverTextStyle: boolean, 
/**
 * Indicates how the font weight was overridden when there is a text style override.
 * BOLD
 * NORMAL
 */
semanticWeight: TypeStyleSemanticWeight, 
/**
 * Indicates how the font style was overridden when there is a text style override.
 * ITALIC
 * NORMAL
 */
semanticItalic: TypeStyleSemanticItalic, };
